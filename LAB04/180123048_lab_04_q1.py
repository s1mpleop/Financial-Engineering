# -*- coding: utf-8 -*-
"""180123048_lab_04_q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11-CvWiel03LDv6xDUnRp2ylqlTCqdBdj
"""

import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import minimize

mu = np.array([0.1, 0.2, 0.15])
S = np.array([[0.005, -0.010, 0.004], 
                [-0.010, 0.040, -0.002], 
                [0.004, -0.002, 0.023]])
rf = 0.1
dim = len(mu)
u = np.ones((1, dim))

def ret(w):
    return np.dot(w, mu)

def risk(w):
    return (np.matmul(np.matmul(w, S), np.transpose(w)))**0.5

def model(Y):
    r = 0
    x = 0
    y = 0
    weights = []
    W = []
    X = []
    for i in range(len(Y)):
        m = Y[i]
        cons = (
            {'type': 'eq', 'fun': lambda w: np.sum(w)-1},
            {'type': 'eq', 'fun': lambda w: ret(w)-m}
        )
        res = minimize(risk, np.array([0.2, 0.3, 0.5]), method='SLSQP', constraints=cons)
        X.append(res.fun)
        W.append(res.x)
        if (Y[i]-0.1)/X[i] > r:
            r = (Y[i]-0.1)/X[i]
            x = X[i]
            y = Y[i]
            weights = W[i]
    return W, X, x, y, weights

#part 1(a)
Y = np.linspace(0.005, 0.5, 1000)
W, X, market_risk, market_ret, market_w = model(Y)

plt.plot(X, Y, color="red")
plt.title("Markowitz Efficient Frontier of the given data ")
plt.xlabel('Volatility')
plt.ylabel("Return")
plt.grid()
plt.show()

#part 1(b)
indx = np.linspace(0, len(W)-1, 10)
indx = [int(i) for i in indx]

print("Weights \t\t\t\t Return\t\t\t Risk")
for i in indx:
    print(np.round(W[i],5),"\t\t",round(Y[i],5),"\t\t\t",round(X[i],5))

print('\n\n')

#part 1(c)

print("Maximum and Minimum Return Portfolio for 15% risk")
tol = 0.0005
for i in range(len(X)):
    if abs(X[i]-0.15) < tol:
      print(' Weights = ',np.round(W[i],4))
      print(' Return = ',round(Y[i],4))
      print(' Risk = ', round(X[i],4))
      print('\n')
print('\n\n')

#part 1(d)

print("Portfolio for 18% risk")
tol = 0.00015
for i in range(len(X)):
    if abs(Y[i]-0.18) < tol:
      print(' Weights = ',np.round(W[i],4))
      print(' Return = ',round(X[i],4))
      print(' Risk = ', round(Y[i],4))
      
print('\n\n')

#part 1(d)
risk_1 = 0.10
c1 = risk_1/market_risk
w1 = np.append(c1*market_w, (1-c1))
print("Portfolio (consisting of both risky and risk free assets) with risk = 10% is")
print('  Risk-Free Asset      :',round(w1[3],5))
print('  Risky Assets Weights :',round(w1[0],5),round(w1[1],5),round(w1[2],5))
print('\n\n')

risk_1 = 0.25
c1 = risk_1/market_risk
w1 = np.append(c1*market_w, (1-c1))
print("Portfolio (consisting of both risky and risk free assets) with risk = 25% is")
print('  Risk-Free Asset      :',round(w1[3],5))
print('  Risky Assets Weights :',round(w1[0],5),round(w1[1],5),round(w1[2],5))
print('\n\n')

ymax = 0.8
xmax = market_risk+market_risk*(ymax-market_ret)/(market_ret-rf)

plt.plot(np.array([0, xmax]), np.array([rf, ymax]), 'g')
plt.title("Capital Market Line")
plt.xlabel("Volatility")
plt.ylabel("Return")
plt.grid()
plt.show()

plt.scatter(market_risk, market_ret,label="Market Protfolio" ,color='blue')
plt.scatter(0, rf,label="Market Protfolio" ,color='blue')
plt.plot(X, Y,label="Markowitz Efficient Frontier" ,color="red")
plt.plot(np.array([0, xmax]), np.array([rf, ymax]),label="CML",color='g')
plt.title("Capital Market Line and Markowitz Efficient Frontier")
plt.legend()
plt.xlabel("Volatility")
plt.ylabel("Return")
plt.grid()
plt.show()