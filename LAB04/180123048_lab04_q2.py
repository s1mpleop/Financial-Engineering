# -*- coding: utf-8 -*-
"""180123048_lab04_q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10cxI1D9wCCC55zxzfrTl6fdCJhXJd1mq
"""

import matplotlib.pyplot as plt
from matplotlib import cm
import numpy as np
from scipy.optimize import minimize

mu = np.array([0.1, 0.2, 0.15])
S = np.array([[0.005, -0.010, 0.004], 
                [-0.010, 0.040, -0.002], 
                [0.004, -0.002, 0.023]])
dim = len(mu)
u = np.ones((1, dim))

def get_ret(w):
    return np.dot(w, mu)

def get_risk(w):
    return (np.matmul(np.matmul(w, S), np.transpose(w)))**0.5

def efficient_frontier(M):
    R = []
    for m in M:
        cons = (
            {'type': 'eq', 'fun': lambda w: np.sum(w)-1},
            {'type': 'eq', 'fun': lambda w: get_ret(w)-m}
        )
        bnds = ((0, 1), (0, 1), (0, 1))
        res = minimize(get_risk, np.array([0.2, 0.3, 0.5]), method='SLSQP', bounds=bnds, constraints=cons)
        R.append(res.fun)
    return R

def minimum_variance(M, i):
    R = []
    W = []
    for m in M:
        cons = (
            {'type': 'eq', 'fun': lambda w: w[i-1]},
            {'type': 'eq', 'fun': lambda w: np.sum(w)-1},
            {'type': 'eq', 'fun': lambda w: get_ret(w)-m}
        )
        bnds = ((0, 1), (0, 1), (0, 1))
        res = minimize(get_risk, np.array([0, 0, 1]), method='SLSQP', bounds=bnds, constraints=cons)
        R.append(res.fun)
        if i == 1:
            W.append([res.x[1], res.x[2]])
        if i == 2:
            W.append([res.x[0], res.x[2]])
        if i == 3:
            W.append([res.x[0], res.x[1]])
    return R, W

M = np.linspace(0.1, 0.2, 1000)
R = efficient_frontier(M)

M1 = np.linspace(0.1, 0.2, 1000)
R1, W1 = minimum_variance(M1, 3)
W1 = np.transpose(W1)

M2 = np.linspace(0.1, 0.15, 1000)
R2, W2 = minimum_variance(M2, 2)
W2 = np.transpose(W2)

M3 = np.linspace(0.15, 0.2, 1000)
R3, W3 = minimum_variance(M3, 1)
W3 = np.transpose(W3)

w1 = 0
Y = []
X = []
while w1 <= 1:
    w2 = 0
    while w2 <= 1-w1:
        w3 = 1 - w1 - w2
        w = np.array([w1, w2, w3])
        m = np.dot(w, mu)
        r = (np.matmul(np.matmul(w, S), np.transpose(w)))**0.5
        Y.append(m)
        X.append(r)
        w2 += 0.001
    w1 += 0.001

plt.figure(figsize=(12,8))
plt.scatter(X, Y,c=Y ,cmap='viridis')
plt.colorbar(label='Feasible Region')
plt.plot(R, M, color='red', label='Efficient Frontier')
plt.plot(R1, M1, color='yellow', label='Minimum Variance Without 1')
plt.plot(R2, M2, color='deepskyblue', label='Minimum Variance Without 2')
plt.plot(R3, M3, color='navy', label='Minimum Variance Without 3')
plt.title('Feasible Region & Efficient Frontier ')
plt.xlabel('Volatility')
plt.ylabel('Return')
plt.legend()
plt.grid()
plt.show()

plt.plot(W1[0], W1[1],color='r')
plt.plot(W2[0], W2[1],color='r')
plt.plot(W3[0], W3[1],color='r')
plt.title('Weights Corresponding to Minimum Variance')
plt.xlabel('Weight 1')
plt.ylabel('Weight 2')
plt.grid()
plt.show()

